import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Locale;
import java.util.Scanner;

public class ExitDialogForm extends JFrame {
    private JButton closeButton;
    private JTextField closeProgramField;
    private JButton cancelButton;
    private JPanel exitPanel;

    public ExitDialogForm() throws FileNotFoundException {
        this.setTitle("Exit window");
        this.setContentPane(exitPanel);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.setLocation(850, 450);
        this.setResizable(false);
        this.pack();

        closeProgramField.setEditable(false);

        closeButton.addActionListener(e -> {
            System.exit(1);
        });

        cancelButton.addActionListener(e -> {
            JFrame againFrame = null;
            try {
                againFrame = new StartMenuForm();
            } catch (FileNotFoundException ex) {
                throw new RuntimeException(ex);
            }
            againFrame.setVisible(true);
            againFrame.setExtendedState(JFrame.NORMAL);

            exitPanel.setVisible(false);
        });

        String path = "C:\\Users\\Ve7te\\IdeaProjects\\Matrix\\src\\InfoAboutTheme";
        File themeFile = new File(path);
        Scanner scanner = new Scanner(themeFile);

        if (scanner.nextLine().equalsIgnoreCase("selected")) {
            setBlackTheme();
        } else {
            setWhiteTheme();
        }

    }

    private void setBlackTheme() {
        cancelButton.setBackground(Color.BLACK);
        cancelButton.setForeground(Color.WHITE);
        closeButton.setBackground(Color.BLACK);
        closeButton.setForeground(Color.WHITE);
        closeProgramField.setBackground(Color.BLACK);
        closeProgramField.setSelectedTextColor(Color.WHITE);
        exitPanel.setBackground(Color.BLACK);
    }

    private void setWhiteTheme() {
        cancelButton.setBackground(Color.WHITE);
        cancelButton.setForeground(Color.BLACK);
        closeButton.setBackground(Color.WHITE);
        closeButton.setForeground(Color.BLACK);
        closeProgramField.setBackground(Color.WHITE);
        closeProgramField.setSelectedTextColor(Color.BLACK);
        exitPanel.setBackground(Color.WHITE);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        exitPanel = new JPanel();
        exitPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1, true, true));
        exitPanel.setVisible(true);
        closeButton = new JButton();
        closeButton.setText("Yes");
        exitPanel.add(closeButton, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        closeProgramField = new JTextField();
        Font closeProgramFieldFont = this.$$$getFont$$$(null, -1, 20, closeProgramField.getFont());
        if (closeProgramFieldFont != null) closeProgramField.setFont(closeProgramFieldFont);
        closeProgramField.setText("Close program?");
        exitPanel.add(closeProgramField, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 2, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("No");
        exitPanel.add(cancelButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return exitPanel;
    }

}
